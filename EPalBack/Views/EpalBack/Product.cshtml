<!-- Page Wrapper -->
<!-- Content Wrapper -->
<div id="content-wrapper" class="d-flex flex-column">

    <!-- Main Content -->
    <div id="content">

        <!-- Topbar -->
        <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
            <h3>商品管理</h3>
        </nav>
        <!-- End of Topbar -->
        <!-- Begin Page Content -->
        <div class="container-fluid">
            <main role="main" class="pb-3">
                <div class="container-fluid">
                    <div id="app" v-cloak>
                        <div class="row">
                            <div class="col-12">
                                <template>
                                    <b-breadcrumb :items="breadCrumbItems"></b-breadcrumb>
                                </template>
                            </div>
                            <div class="col-12">
                                <b-tabs content-class="pt-2 pb-2 px-2" fill v-model="tabIndex">
                                    <b-tab active>
                                        <template #title>
                                            <b-icon icon="arrow-up-square-fill" aria-hidden="true"></b-icon>
                                            <strong>上架中商品</strong>
                                        </template>
                                        <b-row>
                                            <b-col lg="9" class="my-1"></b-col>
                                            <b-col lg="3" class="my-1">
                                                <b-form-group label="關鍵字搜尋" label-for="filter-input"
                                                              label-cols-sm="4" label-align-sm="right" label-size="sm"
                                                              class="mb-0">
                                                    <b-input-group size="sm">
                                                        <b-form-input id="filter-input" v-model="filter"
                                                                      type="search" placeholder="請輸入關鍵字">
                                                        </b-form-input>
                                                    </b-input-group>
                                                </b-form-group>
                                            </b-col>
                                        </b-row>
                                        <b-table v-if="tabIndex==0" :items="items" :fields="fields"
                                                 responsive="sm" stacked="md" show-empty small :per-page="perPage"
                                                 :current-page="currentPage" :filter="filter">
                                            <template #table-busy>
                                                <div class="text-center text-danger my-2">
                                                    <b-spinner class="align-middle"></b-spinner>
                                                    <strong>Loading...</strong>
                                                </div>
                                            </template>

                                            <template #cell(productImg)="row">
                                                <b-img-lazy class="pdlistimg" :src="row.item.productImg"
                                                            thumbnail>
                                                </b-img-lazy>
                                            </template>

                                            <template #cell(actions)="row">
                                                <b-button variant="info" size="sm"
                                                          v-on:click="info(row.item, row.index, $event.target)"
                                                          class="mr-1">
                                                    商品明細
                                                </b-button>
                                                <b-button size="sm"
                                                          v-on:click="ShowUpdateSaleConfirm(row.item.productId,SalesConfirmBoxProps.nonSale)"
                                                          class="mr-1">
                                                    商品下架
                                                </b-button>
                                            </template>
                                        </b-table>
                                        <b-row>
                                            <b-col lg="6" class="ml-auto">
                                                <b-pagination v-model="currentPage" :total-rows="totalRows"
                                                              :per-page="perPage" align="fill" size="md" class="my-0">
                                                </b-pagination>
                                            </b-col>
                                            <b-col lg="3" class="my-1">
                                                <b-form-group label="每頁顯示筆數" label-for="per-page-select"
                                                              label-cols-sm="3" label-cols-lg="9" content-cols="3"
                                                              label-align-sm="right" label-size="sm" class="mb-0">
                                                    <b-form-select id="per-page-select" v-model="perPage"
                                                                   :options="pageOptions" size="sm"></b-form-select>
                                                </b-form-group>
                                            </b-col>
                                        </b-row>
                                    </b-tab>
                                    <b-tab>
                                        <template #title>
                                            <b-icon icon="arrow-down-square-fill" aria-hidden="true"></b-icon>
                                            <strong>已下架商品</strong>
                                        </template>
                                        <b-row>
                                            <b-col lg="9" class="my-1"></b-col>
                                            <b-col lg="3" class="my-1">
                                                <b-form-group label="關鍵字搜尋" label-for="filter-input"
                                                              label-cols-sm="4" label-align-sm="right" label-size="sm"
                                                              class="mb-0">
                                                    <b-input-group size="sm">
                                                        <b-form-input id="filter-input" v-model="filter"
                                                                      type="search" placeholder="請輸入關鍵字">
                                                        </b-form-input>
                                                    </b-input-group>
                                                </b-form-group>
                                            </b-col>
                                        </b-row>
                                        <!-- Main table element -->
                                        <b-table v-if="tabIndex==1" :fields="fields" :current-page="currentPage"
                                                 :per-page="perPage" :filter="filter"
                                                 :filter-included-fields="filterOn" :sort-by.sync="sortBy"
                                                 :sort-desc.sync="sortDesc" responsive="sm"
                                                 :sort-direction="sortDirection" stacked="md" show-empty small
                                                 :busy="isNonSaleBusy.PageBusy" :items="items">
                                            <template #table-busy>
                                                <div class="text-center text-danger my-2">
                                                    <b-spinner class="align-middle"></b-spinner>
                                                    <strong>Loading...</strong>
                                                </div>
                                            </template>

                                            <template #cell(productImg)="row">
                                                <b-img-lazy class="pdlistimg" :src="row.item.productImg"
                                                            thumbnail>
                                                </b-img-lazy>
                                            </template>

                                            <template #cell(actions)="row">
                                                <b-button variant="primary" size="sm"
                                                          v-on:click="info(row.item, row.index, $event.target)"
                                                          class="mr-1">
                                                    商品編輯
                                                </b-button>
                                                <b-button variant="success" size="sm"
                                                          v-on:click="ShowUpdateSaleConfirm(row.item.productId,SalesConfirmBoxProps.onSale)"
                                                          class="mr-1">
                                                    商品上架
                                                </b-button>
                                            </template>
                                        </b-table>

                                        <b-row>
                                            <b-col lg="6" class="ml-auto">
                                                <b-pagination v-model="currentPage" :total-rows="totalRows"
                                                              :per-page="perPage" align="fill" size="md" class="my-0">
                                                </b-pagination>
                                            </b-col>
                                            <b-col lg="3" class="my-1">
                                                <b-form-group label="每頁顯示筆數" label-for="per-page-select"
                                                              label-cols-sm="3" label-cols-lg="9" content-cols="3"
                                                              label-align-sm="right" label-size="sm" class="mb-0">
                                                    <b-form-select id="per-page-select" v-model="perPage"
                                                                   :options="pageOptions" size="sm"></b-form-select>
                                                </b-form-group>
                                            </b-col>
                                        </b-row>

                                        <!-- Info modal -->
                                        <b-modal :id="productDetailsModel.id" :title="productDetailsModel.title"
                                                 header-bg-variant="info" header-text-variant="light" hide-footer
                                                 size="lg" v-on:hidden="resetProductDetailsModel" ref="my-modal"
                                                 scrollable>
                                            <el-switch v-model="enableEdit" active-text="啟用以編輯" class="mb-3">
                                            </el-switch>
                                            <!-- <template #default> -->
                                            <div v-if="isOnSaleBusy.DetailsBusy"
                                                 class="busy text-center text-danger my-2">
                                                <b-spinner class="align-middle"></b-spinner>
                                                <strong>Loading...</strong>
                                            </div>
                                            <div class="details-body" v-if="!isOnSaleBusy.DetailsBusy">
                                                <div class="row justify-content-center">
                                                    <div class="col-12 col-md-6 mb-3">
                                                        <b-img-lazy thumbnail center :src="inputData.creatorImg"
                                                                    v-bind="productDetailsimgProps"
                                                                    class="pddetailsimg">
                                                        </b-img-lazy>
                                                    </div>

                                                    <div class="row justify-content-center">
                                                        <div class="col-12 col-md-6 my-3">
                                                            <label for="">商品姓名</label>
                                                            <input class="form-control" type="text"
                                                                   v-model="inputData.creatorName"
                                                                   :readonly="!enableEdit">
                                                        </div>
                                                        <div class="col-12 col-md-6 my-3">
                                                            <label for="">商品價格</label>
                                                            <input class="form-control" type="number" min="0"
                                                                   v-model="inputData.unitprice"
                                                                   :readonly="!enableEdit">
                                                        </div>

                                                        <div class="col-12 col-md-6 my-3">
                                                            <label for="">伺服器名</label>
                                                            <el-select v-model="inputData.serverId"
                                                                       :disabled="!enableEdit">
                                                                <el-option v-for="item in serverlist.options"
                                                                           :key="item.value" :value="item.value"
                                                                           :label="item.label">
                                                                </el-option>
                                                            </el-select>
                                                        </div>
                                                        <div class="col-12 col-md-6 my-3">
                                                            <label for="">遊戲類別</label>
                                                            <el-select :disabled="!enableEdit"
                                                                       v-model="inputData.gameCategoryId">
                                                                <el-option v-for="item in gamelist.options"
                                                                           :key="item.value" :label="item.label"
                                                                           :value="item.value">
                                                                </el-option>
                                                            </el-select>
                                                        </div>
                                                        <div class="col-12 col-md-6 my-3">
                                                            <label for="">遊戲風格</label>
                                                            <el-select v-model="inputData.styleId"
                                                                       :disabled="!enableEdit">
                                                                <el-option v-for="item in stylelist.options"
                                                                           :key="item.value" :value="item.value"
                                                                           :label="item.label">
                                                                </el-option>
                                                            </el-select>
                                                        </div>
                                                        <div class="col-12 col-md-6 my-3">
                                                            <label for="">語言類別</label>
                                                            <el-select v-model="inputData.languageId"
                                                                       :disabled="!enableEdit">
                                                                <el-option v-for="item in languagelist.options"
                                                                           :key="item.value" :value="item.value"
                                                                           :label="item.label">
                                                                </el-option>
                                                            </el-select>
                                                        </div>
                                                    </div>
                                                    <div class="row justify-content-center my-3">
                                                        <label for="">遊戲介紹</label>
                                                        <el-input class="content" type="textarea" :rows="7"
                                                                  v-model="inputData.Introduction"
                                                                  :readonly="!enableEdit">
                                                        </el-input>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- </template> -->
                                            <div class="modal-footer my-3">
                                                <button type="button" class="btn btn-secondary"
                                                        @@click="hideModal">
                                                    取消
                                                </button>
                                                <button v-on:click="UpdateProduct" type="button"
                                                        class="btn btn-primary">
                                                    更新
                                                </button>
                                            </div>

                                        </b-modal>
                                    </b-tab>
                                </b-tabs>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
        <!-- /.container-fluid -->
    </div>
    <!-- End of Main Content -->
    <!-- Footer -->
    <footer class="sticky-footer bg-white">
        <div class="container my-auto">
            <div class="copyright text-center my-auto">
                <span>Copyright &copy; Your Website 2020</span>
            </div>
        </div>
    </footer>
    <!-- End of Footer -->

</div>
<!-- End of Content Wrapper -->
<!-- End of Page Wrapper -->
<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
</a>

<!-- Logout Modal-->
<div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                <a class="btn btn-primary" href="login.html">Logout</a>
            </div>
        </div>
    </div>
</div>


@section topCSS
{
    <style>
        .nav-tabs .nav-item.show .nav-link,
        .nav-tabs .nav-link.active {
            color: #28a745;
        }

        #app .tab-content {
            background-color: #fff;
            border-left: 1px solid #dee2e6;
            border-right: 1px solid #dee2e6;
            border-bottom: 1px solid #dee2e6;
        }

        .breadcrumb {
            padding: 0 0 0 0px;
            background-color: transparent;
            font-size: 0.875rem;
        }

        .pdlistimg {
            width: 100px;
            height: 100px;
        }
    </style>
}

@section endJS{
    <script>

        let app = new Vue({
            el: '#app',
            data: {
                items: [],
                fields: [
                    { key: 'productId', label: '商品編號', sortable: true, sortDirection: 'desc' },
                    { key: 'gameName', label: '遊戲類別', sortable: true, sortDirection: 'desc' },
                    { key: 'productImg', label: '商品照片', sortable: false, sortDirection: 'desc' },
                    { key: 'memberName', label: '玩家姓名', sortable: true, sortDirection: 'desc' },
                    {
                        key: 'unitPrice', label: '單價', sortable: true, sortDirection: 'desc', formatter: (value, key, item) => {
                            return '$' + CurrencyFormat(value);
                        }
                    },
                    { key: 'actions', label: '商品管理' },

                ],
                inputData: {
                    productId: '',
                    creatorName: '',
                    creatorId: '',
                    gameCategoryId: '',
                    styleId: '',
                    serverId: '',
                    languageId: '',
                    creatorImg: '',
                    unitprice: 0,
                    Introduction: ''
                },
                currentItem: {},
                tabIndex: 0,
                totalRows: 1,
                currentPage: 1,
                perPage: 5,
                pageOptions: [5, 10, 20],
                sortBy: '',
                sortDesc: false,
                //預設排序順序 小 -> 大
                sortDirection: 'asc',
                filter: null,
                filterOn: [],
                productDetailsModel: {
                    id: 'product-details-modal',
                    fields: [
                        { key: 'creatorName', title: '商品姓名', value: '' },
                        { key: 'creatorId', title: '會員編號', value: '' },
                        { key: 'creatorImg', title: '玩家圖片', value: '' },
                        { key: 'gameCategory', title: '遊戲類別', value: '' },
                        { key: 'server', title: '伺服器名稱', value: '' },
                        { key: 'unitPrice', title: '單價', value: '' },
                        { key: 'language', title: '語言', value: '' },
                        { key: 'style', title: '遊戲風格', value: '' },
                        { key: 'introduction', title: '遊戲自介', value: '' },
                    ]
                },
                // enableEdit: false,

                //描述頁面是否忙碌中，EX:進行非同步作業
                isOnSaleBusy: { PageBusy: false, DetailsBusy: false },
                isNonSaleBusy: { PageBusy: false, DetailsBusy: false },

                // url列表
                urlList: {
                    productDetails: '/api/product/getproductDetails',
                    languageList: '/api/product/getalllanguage',
                    gameList: '/api/product/getallgame',
                    serverList: '/api/product/getallserver',
                    styleList: '/api/product/getallstyle',
                    updateProductSalesStatus: '/api/product/UpdateProductSalesStatus',
                    simplifyproductsOnSale: '/api/product/getproductbyonsale',
                    simplifyproductsNonSale: '/api/product/getproductbynonsale'
                },

                //麵包屑
                breadCrumbItems: [
                    {
                        text: '首頁',
                        href: 'index.html'
                    },
                    {
                        text: '商品列表',
                        active: true
                    }
                ],
                productDetailsimgProps: {
                    blank: true,
                    blankColor: '#bbb',
                    width: 240,
                    height: 340
                },

                languagelist: {
                    busy: false,
                    options: [],
                },

                gamelist: {
                    busy: false,
                    options: [],
                },

                stylelist: {
                    busy: false,
                    options: [],
                },

                serverlist: {
                    busy: false,
                    options: [],
                },
                //switch
                enableEdit: false,
                disable: false,

                //商品上下架MessageBox參數
                SalesConfirmBoxProps: {
                    onSale: { message: '請再次確認是否要上架商品', data: { Status: true } },
                    nonSale: { message: '請再次確認是否要下架商品', data: { Status: false } }
                },
            },



            //商品明細圖片延遲載入的參數

            created() {
                //初始化頁面
                this.tabIndex = 0;
                this.OnSalePage();
                this.GetPageSelectors();
            },
            computed: {

            },
            watch: {
                items: function () {
                    this.totalRows = this.items.length
                },
                tabIndex: function () {
                    switch (this.tabIndex) {
                        case 0:
                            this.OnSalePage();
                            break;
                        case 1:
                            this.NonSalePage();
                            break;
                        default:
                            break;
                    }
                }
            },
            methods: {
               

                //設定頁面初始狀態
                SetPageDefault() {
                    this.items = [];
                    this.totalRows = 1;
                    this.currentPage = 1;
                    this.perPage = 5;
                    this.sortBy = '';
                    this.sortDesc = false;
                    this.filter = null;
                },

                //切換上架商品頁
                OnSalePage() {
                    this.SetPageDefault();
                    this.getSimplifyProducts(this.urlList.simplifyproductsOnSale, this.isOnSaleBusy, true)
                },

                //切換下架商品頁
                NonSalePage() {
                    // console.log('Nonsalepage');
                    this.SetPageDefault();
                    this.getSimplifyProducts(this.urlList.simplifyproductsNonSale, this.isOnSaleBusy, false)
                },

                //取得簡化版的商品
                getSimplifyProducts(uri, busyobj, onsale) {
                    busyobj.PageBusy = true;
                    let cfg = {
                        method: 'get',
                        headers: {
                            'Content-type': 'application/json',
                            'Authorization': GenCurrentAuthBarerFormat(),
                        },
                        url: uri
                    };
                    // console.log(cfg)
                    axios(cfg)
                        .then(res => {
                            console.log(res)
                            if (Array.isArray(res.data.result) && res.status == 200) {

                                switch (res.data.status) {
                                    case 0:
                                        this.items = this.SimplifyProductDataProc(res.data.result, onsale);
                                        break;
                                    default:
                                        console.warn(res);
                                        break;
                                }
                            }
                            else {
                                throw new UserException('Unknown Error');
                            }
                        })
                        .catch(err => {
                            if (err.response.status === 401) {
                                LoginInvalidRedirect();
                            }
                            console.dir(err);
                        })
                        .finally(() => {
                            busyobj.PageBusy = false;
                        });
                },

                //將API回傳的商品簡化版清單的格式轉成Vue物件所需的格式
                SimplifyProductDataProc(raw, onsale) {
                    return raw.map((item, index) => {
                        return {
                            productId: item.productId,
                            gameName: item.gameName,
                            productImg: item.productImg,
                            unitPrice: item.unitPrice,
                            memberName: item.memberName
                        }
                    });
                },

                //取得商品明細
                getProductDetails(uri, id) {
                    let cfg = {
                        method: 'get',
                        headers: {
                            'Content-type': 'application/json',
                            'Authorization': GenCurrentAuthBarerFormat(),
                        },
                        url: `${uri}/${id}`
                    };
                    console.log(cfg)
                    return axios(cfg);
                },

                //顯示商品明細
                async info(item, index, button) {
                    try {
                        this.enableEdit = false;
                        this.isOnSaleBusy.DetailsBusy = true;
                        this.productDetailsModel.title = `商品明細 - ID：${item.productId}`
                        this.$root.$emit('bv::show::modal', this.productDetailsModel.id, button);
                        let response = await this.getProductDetails(this.urlList.productDetails, item.productId)

                        if (response.status == 200) {
                            let data = response.data.result;
                            let newdata = data[0]
                            console.log(JSON.stringify(newdata))
                            this.inputData.productId = newdata.productId;
                            this.inputData.creatorId = newdata.creatorId;
                            this.inputData.creatorName = newdata.creatorName;
                            this.inputData.creatorImg = newdata.creatorImg;
                            this.inputData.languageId = newdata.languageId;
                            this.inputData.serverId = newdata.serverId;
                            this.inputData.gameCategoryId = newdata.gameCategoryId;
                            this.inputData.unitprice = newdata.unitPrice;
                            this.inputData.Introduction = newdata.introduction;
                            this.inputData.styleId = newdata.styleId;
                        }
                        else {
                            throw new UserException('UnKnown Error')
                        }
                    } catch (err) {

                        console.log(err);
                    } finally {
                        this.isOnSaleBusy.DetailsBusy = false;
                    }
                },

                //resetModel
                resetProductDetailsModel() {
                    this.productDetailsModel.title = ''
                    this.productDetailsModel.fields.map(x => x.value = '');
                },

                //取得全部表格Options
                GetPageSelectors() {
                    let language = this.GetSelectorOptions(this.urlList.languageList);
                    let style = this.GetSelectorOptions(this.urlList.styleList);
                    let server = this.GetSelectorOptions(this.urlList.serverList);
                    let game = this.GetSelectorOptions(this.urlList.gameList);

                    return Promise.all([style, server, game, language])
                        .then(res => {
                            // console.log(res)
                            let [style, server, game, language] = res;
                            this.stylelist.options = style.data.result[0].styleAll.map(x => { return { value: x.styleId, label: x.styleName } })
                            this.serverlist.options = server.data.result[0].serverAll.map(x => { return { value: x.serverId, label: x.serverName } })
                            this.gamelist.options = game.data.result[0].gameAll.map(x => { return { value: x.gameId, label: x.gameName } })
                            this.languagelist.options = language.data.result[0].languageAll.map(x => { return { value: x.languageId, label: x.languageName } })
                            // console.log(this.stylelist.value)
                            console.log(this.gamelist)

                        }).catch(err => {
                            console.error(err);
                        });
                },

                //透過API取得Options內容
                GetSelectorOptions(url) {
                    let cfg = {
                        method: 'get',
                        header: {
                            'Content-type': 'application/json',
                            'Authorization': GenCurrentAuthBarerFormat(),
                        },
                        url: url
                    };
                    return axios(cfg);
                },

                //更新ProductDetail
                UpdateProduct() {
                    axios.post('/api/product/UpdateProduct', this.inputData)
                        .then(res => {
                            console.log(res)

                            if (res.data.status == 0 && res.data.result == true && this.tabIndex == 0) {
                                toastr.success('更新成功');
                                this.OnSalePage();
                                this.$refs['my-modal'].hide()


                            } else if (res.data.status == 0 && res.data.result == true && this.tabIndex == 1) {
                                toastr.success('更新成功');
                                this.NonSalePage();
                                this.$refs['my-modal'].hide()
                            }
                            else {
                                toastr.error('更新失敗')
                                this.$refs['my-modal'].hide()

                            }
                        })
                },

                hideModal() {
                    this.$refs['my-modal'].hide()
                },

                //顯示上下架確認視窗
                ShowUpdateSaleConfirm(productId, cfg) {
                    this.$bvModal.msgBoxConfirm(cfg.message, {
                        title: '操作確認',
                        size: 'md',
                        buttonSize: 'md',
                        okVariant: 'warning',
                        okTitle: '確認',
                        cancelTitle: '取消',
                        footerClass: 'p-2',
                        hideHeaderClose: true,
                        centered: true,
                        noCloseOnEsc: true,
                        noCloseOnBackdrop: true
                    })
                        .then(value => {

                            if (value) {
                                let data = {
                                    ProductId: productId,
                                    SaleStatus: cfg.data.Status,
                                }
                                console.log(data)
                                this.UpdateProductSalesStatus(this.urlList.updateProductSalesStatus, data)
                            }
                        })
                        .catch(err => {
                            // An error occurred
                        })
                },
                //更新商品銷售狀態
                UpdateProductSalesStatus(uri, data) {
                    let cfg = {
                        method: 'put',
                        headers: {
                            'Content-type': 'application/json',
                            'Authorization': GenCurrentAuthBarerFormat(),
                        },
                        data: {
                            ProductId: data.ProductId,
                            SaleStatus: data.SaleStatus

                        },

                        url: uri

                    };
                    console.log(cfg)
                    let successMsg = data.SaleStatus ? '已成功將商品上架' : '已成功將商品下架';
                    let errorMsg = data.SaleStatus ? '商品上架請求失敗' : '商品下架請求失敗';


                    axios(cfg)
                        .then(res => {
                            console.log(res)
                            if (res.status == 200) {
                                switch (res.data.status) {
                                    case 0:
                                        let index = this.items.findIndex(x => x.productId === data.ProductId)
                                        console.log(index)
                                        if (index >= 0) {
                                            toastr.success('操作成功');
                                            this.items.splice(index, 1);
                                        }
                                        break;
                                    default:
                                        console.warn(res);
                                        toastr.success('操作失敗');
                                        break;
                                }
                            } else {
                                throw new UserException('Unknown Error');
                            }
                        })
                        .catch(err => {
                            if (err.response.status === 401) {
                                LoginInvalidRedirect();
                            }
                            console.error(err);
                            this.$bvToast.toast(errorMsg, {
                                title: `商品操作失敗`,
                                variant: "danger",
                                autoHideDelay: 1200,
                                appendToast: true
                            });
                        })
                        .finally(() => {
                        });
                }
            }
        })
    </script>
    <script>
        
    </script>
}

@section topJS{
    
    <script>
        if (localStorage.getItem('accessToken') == null) {
            window.location.href = '/Epalback/login';
        }
    </script>
}